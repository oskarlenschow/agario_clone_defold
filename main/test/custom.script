local animate = false

local function fill_positions(self, v0, v1, v2, v3)
    -- first triangle
    self.positions[1] = v0.x
    self.positions[2] = v0.y
    self.positions[3] = v0.z

    self.positions[4] = v1.x
    self.positions[5] = v1.y
    self.positions[6] = v1.z

    self.positions[7] = v2.x
    self.positions[8] = v2.y
    self.positions[9] = v2.z
    
    -- second triangle
    
    self.positions[10] = v0.x
    self.positions[11] = v0.y
    self.positions[12] = v0.z

    self.positions[13] = v2.x
    self.positions[14] = v2.y
    self.positions[15] = v2.z

    self.positions[16] = v3.x
    self.positions[17] = v3.y
    self.positions[18] = v3.z
end

function init(self)
    
    self.res = go.get("#temp", "vertices")
    print(self.res)
    
    self.buffer = resource.get_buffer(self.res)
    print(self.buffer)
    
    self.positions = buffer.get_stream(self.buffer, "position")
    print(self.positions)

    -- if the buffer has some data you could change these values here
    -- self.positions[1] = self.positions[1] + dt

    -- create a new buffer, since the one in the resource doesn't have enough size
    self.new_buffer = buffer.create(6, {
        { name = hash("position"),
         type=buffer.VALUE_TYPE_FLOAT32,
         count = 3 }
    })

    -- get the position stream
    self.positions = buffer.get_stream(self.new_buffer, "position")

    self.v0 = vmath.vector4(-0.1, -0.1, 0, 0)
    self.v1 = vmath.vector4( 0.1, -0.1, 0, 0)
    self.v2 = vmath.vector4( 0.1,  0.1, 0, 0)
    self.v3 = vmath.vector4(-0.1,  0.1, 0, 0)
   
    fill_positions(self, self.v0, self.v1, self.v2, self.v3)

    resource.set_buffer(self.res, self.new_buffer)

    
    if animate then
        self.animate_angle = 0
    end
end

function update(self, dt)
    if animate then
        self.animate_angle = self.animate_angle + dt
        self.rot_mtx = vmath.matrix4_rotation_z(self.animate_angle)
        local v0 = self.rot_mtx * self.v0
        local v1 = self.rot_mtx * self.v1
        local v2 = self.rot_mtx * self.v2
        local v3 = self.rot_mtx * self.v3

        fill_positions(self, v0, v1, v2, v3)
        resource.set_buffer(self.res, self.new_buffer)
    end
end
